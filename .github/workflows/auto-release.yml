name: Create Pull requests released contents

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  create-auto-tag:
    if: github.event.pull_request.base.ref == 'main' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    timeout-minutes: 10
    env:
      MASTER_BRANCH: main
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out repository with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Ensure authentication
        run: gh auth status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch latest tags
        run: git fetch --prune --tags -f

      - name: Create release tag and generate release notes
        continue-on-error: false
        env:
          USE_ORIGINAL_TAG: false
          NEW_TAG_NAME: "original_tag"
        run: |
          # 最新のタグ取得 (タグがない場合は v0.0.0 を設定)
          LATEST_TAG_COMMIT=$(git rev-list --tags --max-count=1)
          if [ -z "$LATEST_TAG_COMMIT" ]; then
              echo "No existing tags found. Using v0.0.0 as base."
              NOW_TAG="v0.0.0"
          else
              NOW_TAG=$(git describe --tags "$LATEST_TAG_COMMIT")
          fi
          echo "NOW_TAG is ${NOW_TAG}"

          if [ "${USE_ORIGINAL_TAG}" == "false" ]; then
            # 現在のバージョンを解析
            MAJOR_VER=$(echo "${NOW_TAG#v}" | awk -F. '{print $1}')
            MINOR_VER=$(echo "${NOW_TAG}" | awk -F. '{print $2}')
            PATCH_VER=$(echo "${NOW_TAG}" | awk -F. '{print $3}')

            # PR のラベルからバージョンアップの種類を取得
            UP_VER=""
            items=$(GH_TOKEN=${{ secrets.GITHUB_TOKEN }} gh pr view ${{ github.event.number }} --repo "${{ github.repository }}" --json labels -q '.labels')

            if [ -z "$items" ] || [ "$items" = "[]" ]; then
                echo "エラー: PR にリリースバージョンのラベル (major, minor, patch) が付いていません"
                exit 1
            fi

            IFS=$'\n'
            for item in $(echo "$items" | jq -r 'map(.name) | .[]'); do
                case "${item}" in
                    "major"|"minor"|"patch")
                        UP_VER=${item}
                        ;;
                esac
            done

            if [ -z "$UP_VER" ]; then
                echo "エラー: リリースバージョンのラベル (major, minor, patch) が見つかりません"
                exit 1
            fi

            case "$(echo "${UP_VER}" | tr 'A-Z' 'a-z')" in
                "major")
                  MAJOR_VER=$((MAJOR_VER + 1))
                  MINOR_VER=0
                  PATCH_VER=0
                  ;;
                "minor")
                  MINOR_VER=$((MINOR_VER + 1))
                  PATCH_VER=0
                  ;;
                "patch")
                  PATCH_VER=$((PATCH_VER + 1))
                  ;;
                *)
                  echo "Error: Invalid UP_VER value: ${UP_VER}"
                  exit 1
                  ;;
            esac
            NEW_TAG="v${MAJOR_VER}.${MINOR_VER}.${PATCH_VER}"
          else
            NEW_TAG=${NEW_TAG_NAME}
          fi

          echo "NEW_TAG is ${NEW_TAG}"

          # PR の body 情報を取得
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }} gh pr view ${{ github.event.number }} --repo "${{ github.repository }}" --json body -q '.body' > pr_body.txt

          # GitHub Release Notes の自動生成（前回のタグがない場合は previous_tag_name を送信しない）
          if [ "$NOW_TAG" = "v0.0.0" ]; then
              echo "Generating release notes without previous_tag_name..."
              GENERATED_NOTES=$(GH_TOKEN=${{ secrets.GITHUB_TOKEN }} gh api repos/${{ github.repository }}/releases/generate-notes \
                  -F tag_name="${NEW_TAG}" \
                  -F target_commitish="${MASTER_BRANCH}" \
                  --jq .body)
          else
              echo "Generating release notes with previous_tag_name ${NOW_TAG}..."
              GENERATED_NOTES=$(GH_TOKEN=${{ secrets.GITHUB_TOKEN }} gh api repos/${{ github.repository }}/releases/generate-notes \
                  -F tag_name="${NEW_TAG}" \
                  -F target_commitish="${MASTER_BRANCH}" \
                  -F previous_tag_name="${NOW_TAG}" \
                  --jq .body)
          fi
          echo "$GENERATED_NOTES" > generated_notes.txt

          # PR の body と自動生成されたリリースノートを結合
          cat pr_body.txt > release_notes.txt
          echo -e "\n---\n" >> release_notes.txt
          cat generated_notes.txt >> release_notes.txt

          today=$(date +'%Y/%m/%d')

          # タグとリリースを作成
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }} gh release create ${NEW_TAG} --notes-start-tag ${NOW_TAG} --latest --target ${{ env.MASTER_BRANCH }} -F release_notes.txt -t "${today} リリース"
